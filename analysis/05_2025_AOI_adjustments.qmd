---
title-block-banner: "#00ad78ff"
title-block-banner-color: "#ffffff"
title: CADC - 2025 Monitoring - AOI Adjustment Evaluation
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    self-contained: true
    embed-resoures: true
    smooth-scroll: true
execute:
  include: true
  echo: true
  warning: false
  message: false
  eval: true
  results: "asis"
  out.width: "100%"
  code-fold: true
editor: visual
project:
  execute-dir: project
---

## AOI Refinement

Analysis to assess potential to refine AOI for CADC

```{r}
#' analysis script to understand implication of changing AOI to select admin 1's

box::use(
  dplyr[...],
  tidyr[...],
  janitor[...],
  stringr[...],
  glue[...],
  rlang[...],
  purrr[...],
  gghdx[...],
  ggplot2[...],
  forcats[...],
  sf[...],
  readr[...],
  
  lubridate[...],
  ggrepel[...],
  gt[...],
  geoarrow[...],
  arrow[...],
  cumulus
)

gghdx()
txt_label_size <- 3



threshold_var <-  function(df,var, by,rp_threshold,direction=1){
  if(direction==1){
    ret <- df |> 
      group_by(
        across({{by}})
      ) |> 
      arrange(
        desc(!!sym(var))
      ) |> 
      mutate(
        rank = row_number(),
        q_rank = rank/(max(rank)+1),
        rp_emp = 1/q_rank,
        !!sym(glue("{var}_flag")):= rp_emp>=rp_threshold
      ) |> 
      select(
        -rank,
        -q_rank
        )
  }
  if(direction == -1){
    ret <- df |> 
      group_by(
        across({{by}})
      ) |> 
      arrange(
        (!!sym(var))
      ) |> 
      mutate(
        rank = row_number(),
        q_rank = rank/(max(rank)+1),
        rp_emp = 1/q_rank,
        !!sym(glue("{var}_flag")):= rp_emp>=rp_threshold
      ) |> 
      select(
        -rank,
        -q_rank
        )
  }
  ret
}
```



```{r}
# Prep Meta Lookup --------------------------------------------------------
con <- cumulus$pg_con()

tbl_polys <- tbl(con,"polygon") |> 
  filter(adm_level == 1)

df_lookup <- cumulus$blob_load_admin_lookup() |> 
  clean_names()

df_polys <- tbl_polys |> 
  filter(
    iso3 %in% c("NIC","HND","SLV","GTM")
  ) |> 
  collect() |> 
  clean_names()

df_poly_meta <- df_polys |> 
  left_join(
    df_lookup |> 
      select(iso3,matches("adm\\d"),matches("adm_level")) |> 
      filter(adm_level ==1), by = c("iso3" = "iso3","pcode"="adm1_pcode","adm_level")
  )

df_new_aoi_meta <- df_poly_meta |> 
  filter(
    # just lazy regex to detect names provided to me in a teams chat -- the returned data.frame
    # is correct -- for an official pipeline - we would hardcode these more explicitly
    str_detect(
      adm1_name, 
      "San Vicente|El Paraiso|Francisco Morazan|Matagalpa|Estel|Nueva Segovia|Madriz|Chiquimula")
  )
```

## Map new AOI

```{r}
#| eval: true


lgdf_nic <- cumulus$download_fieldmaps_sf(iso3="nic",layer =c("nic_adm1","nic_adm0"))
lgdf_hnd <- cumulus$download_fieldmaps_sf(iso3="hnd",layer=c("hnd_adm1","hnd_adm0"))
lgdf_slv <- cumulus$download_fieldmaps_sf(iso3="slv",layer=c("slv_adm1","slv_adm0"))
lgdf_gtm <- cumulus$download_fieldmaps_sf(iso3="gtm",layer=c("gtm_adm1","gtm_adm0"))


gdf_adm1_cadc <- list_rbind(
  list(
    lgdf_nic$nic_adm1,
    lgdf_hnd$hnd_adm1,
    lgdf_slv$slv_adm1,
    lgdf_gtm$gtm_adm1
  )
) |> 
  rename(
    geometry=geom
  )

gdf_adm0_cadc <- list_rbind(
  list(
    lgdf_nic$nic_adm0,
    lgdf_hnd$hnd_adm0,
    lgdf_slv$slv_adm0,
    lgdf_gtm$gtm_adm0
  )
) |> 
  rename(
    geometry=geom
  )


```

```{r}
#| eval: false

cumulus$blob_write(
  gdf_adm1_cadc,
  container = "projects",
  name =  "ds-aa-lac-dry-corridor/framework_update_2025/gdf_cadc_adm1.parquet"
  )
cumulus$blob_write(
  gdf_adm0_cadc,
  container = "projects",
  name =  "ds-aa-lac-dry-corridor/framework_update_2025/gdf_cadc_adm0.parquet"
  )

gdf_adm1_cadc <- cumulus$blob_read(
  container = "projects",
  name =  "ds-aa-lac-dry-corridor/framework_update_2025/gdf_cadc_adm1.parquet"
  )

gdf_adm0_cadc <- cumulus$blob_read(
  container = "projects",
  name =  "ds-aa-lac-dry-corridor/framework_update_2025/gdf_cadc_adm0.parquet"
  )


```


```{r}

gdf_aoi <- gdf_adm1_cadc |> 
  filter(
    ADM1_PCODE %in% df_new_aoi_meta$pcode
  )

ggplot()+
  geom_sf(data =gdf_adm0_cadc,aes(geometry= geometry), fill ="white")+
  geom_sf(data= gdf_aoi,aes(geometry=geometry), fill = "red")+
  theme_void()+
  theme(
    panel.background = element_rect(fill = "lightblue"),
    panel.grid = element_blank(),
    plot.background = element_rect(fill = "lightblue")
  )
```



Quickly checking the SEAS5 meta-data from our postgres DB to make sure the number of pixels per admin is adequate. Here are the pixels per admin
```{r}
# quick check on number of pixels.
df_new_aoi_meta |> 
  select(
    pcode, iso3, name,starts_with("seas5")
  ) |> 
  gt() |> 
  fmt_number(columns ="seas5_frac_raw_pixels",decimals = 2)
```

At the end of the day we will be aggregating per `country`/`iso3` so let's sum across countrys
```{r}
df_new_aoi_meta |> 
  select(
    pcode, iso3, name,starts_with("seas5")
  ) |> 
  group_by(iso3) |> 
  summarise(
    across(where(is.numeric),\(x) sum(x))
  ) |> 
  gt() |> 
  fmt_number(columns ="seas5_frac_raw_pixels",decimals = 2)
```

## Aggreate/Analyze Forecast

### ECMWF SEAS5

First we just look at ECMWF  - here we actually consider all leadtimes -- not just those considered for monitoring and we see no activations present in historical record. If we did see activations we would want to check on what leadtimes those occured.

```{r}  
# Prep Seas5 --------------------------------------------------------------

df_seas5 <- tbl(con,"seas5") |> 
  filter(
    adm_level == 1,
    pcode %in% df_new_aoi_meta$pcode,
    month(valid_date)%in% c(5:11) # just grabbing all relevant months for both windows
  ) |> 
  collect() # this actually loads data into memory so can take a 10s or so.

df_seas5 <- df_seas5 |> 
  mutate(
    precipitation = days_in_month(valid_date) * mean
  )
  

df_primera <- cumulus$seas5_aggregate_forecast(
    df_seas5,
    value = "precipitation",
  valid_months =c(5:8),
  by = c("iso3", "pcode","issued_date")
) |> 
    filter(
    month(issued_date)!=2 # remove Feb
  )

df_postrera <- cumulus$seas5_aggregate_forecast(
  df_seas5,
  valid_months =c(9:11),
  value = "precipitation",
  by = c("iso3", "pcode","issued_date")
  )



# Weighted Average of Forecast AOI ----------------------------------------

ldf_seas <- list(
  "primera"= df_primera,
  "postrera" = df_postrera
) |> 
  map(
    \(dft){
      dft |> 
        left_join(df_new_aoi_meta) |> 
        group_by(iso3, issued_date, leadtime, valid_month_label) |> 
        summarise(
          mm = weighted.mean (precipitation, w =seas5_n_upsampled_pixels ),.groups="drop"
        )
    }
  )

ldf_thresholded <- ldf_seas |> 
  map(
    \(dft){
      dft |> 
        threshold_var(
          var= "mm",
          by = c("iso3","leadtime"),
          rp_threshold = 4,
          direction =-1
        ) 
    }
  )

```


```{r}
p_timeseries_refined_aoi <- ldf_thresholded |> 
  imap(
    \(dft,nmt){
      month_range_temp <- ifelse(nmt == "primera","MJJA","SON")
      dft_min <- dft |> 
        # get min per issued date (across LTs)
        group_by(iso3,year(issued_date)) |> 
        slice_min(
          order_by = mm, n= 1
        ) 
      dft_min |> 
        ggplot(
          aes(x= year(issued_date),y=mm, group = 1)
        )+
        geom_point(aes(color = mm_flag), alpha= 0.7, size= 4)+
        geom_line(color = "black")+
        facet_wrap(~iso3)+
        scale_color_manual(values = c(hdx_hex("sapphire-hdx"),hdx_hex("tomato-hdx")))+
        labs(
          title = glue("ECMWF SEAS {month_range_temp} Forecasts"),
          subtitle = str_to_title(nmt),
          caption = "Plotting minimum rainfall at any leadtime monitoried in AA Framework
          Analysis performed at sub-national levelbased on area-weighted average of admins of interest per country"
        ) +
        geom_text_repel(
          data= filter(dft_min,mm_flag),
          aes(label = year(issued_date)), color = hdx_hex("tomato-hdx"), size=txt_label_size
        )+
        theme(
          axis.title = element_blank(),
          legend.position = "none"
        )
    }
  )

```

Plot historical time series of minimum rainfall per season/yr for both Primera and Postrera
```{r}
p_timeseries_refined_aoi$primera
```

```{r}
p_timeseries_refined_aoi$postrera
```


- let's do simple linear interpolation of empirical RPs to calculate the thresholds - i think let's keep the historical record the same as 2024 monitoring 1981-2022
- note that previously I had calculated empirical RP using the inverse of the percentile as defined by default settings in R  R base `stats::quantile()`.  However, now I'm using the classical empirical RP calculation to align better w/ new frameworks etc.

- results unchanged
```{r}
ldf_thresholded_1981_2022 <- ldf_seas |> 
  map(
    \(dft){
      dft |> 
        filter(
          year(issued_date)<=2022
        ) |> 
        # this func classifies each record RP and creates a boolean of whether or not the threshold
        # is passed. We ignore the boolean and just grab the rp_empiricaal values for interpolation
        threshold_var(
          var= "mm",
          by = c("iso3","leadtime"),
          rp_threshold = 4,
          direction =-1
        ) 
    }
  )

# now we can linearly interpolate:
rp_linear_funcs <- ldf_thresholded_1981_2022 |> 
  map(
    \(dft){
      dft |> 
        group_by(iso3,leadtime) |> 
        summarise(
          calc_empirical_rp_level = list(approxfun(rp_emp, mm,method = "linear", rule =2,yright =Inf)),
          calc_empirical_rp = list(approxfun( mm,rp_emp,method = "linear",rule =2))
        )
          }
    )

# interpolate for RP 4
df_rp4_by_lt <- rp_linear_funcs |> 
  map(\(dft){
    dft |> 
      group_by(iso3, leadtime) |> 
      reframe(
        RP_empirical = 4,
        value_empirical = map_dbl(RP_empirical,calc_empirical_rp_level),
      )
  }
  )

# now we can compare the entire record to this interpolated RP 4. We basically had to this extra
# step so that we could use the 1981-2022 as a baeline for creating the threshold. If we were
# using the whole record the `threshold_var()` func would habe done it all.

ldf_seas5_thresholded_w_recent <-   map(
    set_names(names(df_rp4_by_lt),names(df_rp4_by_lt)),
    \(season_temp){
    season_temp <- "primera"
    df_thresh <- df_rp4_by_lt[[season_temp]]
    df_historical  = ldf_seas[[season_temp]]
    df_historical |> 
      left_join(df_thresh) |> 
      mutate(
        mm_flag = mm<=value_empirical
      )
  })

p_timeseries_refined_aoi_1988_2022_base <- ldf_seas5_thresholded_w_recent |> 
  imap(
    \(dft,nmt){
      month_range_temp <- ifelse(nmt == "primera","MJJA","SON")
      dft_min <- dft |> 
        # get min per issued date (across LTs)
        group_by(iso3,year(issued_date)) |> 
        slice_min(
          order_by = mm, n= 1
        ) 
      dft_min |> 
        ggplot(
          aes(x= year(issued_date),y=mm, group = 1)
        )+
        geom_point(aes(color = mm_flag), alpha= 0.7, size= 4)+
        geom_line(color = "black")+
        facet_wrap(~iso3)+
        scale_color_manual(values = c(hdx_hex("sapphire-hdx"),hdx_hex("tomato-hdx")))+
        labs(
          title = glue("ECMWF SEAS {month_range_temp} Forecasts"),
          subtitle = str_to_title(nmt),
          caption = "Plotting minimum rainfall at any leadtime monitoried in AA Framework
          Analysis performed at sub-national levelbased on area-weighted average of admins of interest per country"
        ) +
        geom_text_repel(
          data= filter(dft_min,mm_flag),
          aes(label = year(issued_date)), color = hdx_hex("tomato-hdx"), size= txt_label_size
        )+
        theme(
          axis.title = element_blank(),
          legend.position = "none"
        )
    }
  )
```

We see that the results are still the same as previously when RP was calculated from all years on record 1981-2024

```{r}
p_timeseries_refined_aoi_1988_2022_base$primera
```

```{r}
p_timeseries_refined_aoi_1988_2022_base$postrera
```

### INSIVUMEH


Looking at just INSIVUMEH historical activation record - again, we see again no activations in 2024.
```{r}

# We ran the same basic analysis for INSIVUMEH data in a separate R-script. As this required zonal stats on the raster files theselves, this was done in a separate rscript: `analysis/insivumeh_refined_aoi_zonal_stats.R` so that the intermediate outputs could be saved on blob to be pulled into this notebook for quicker/more effecient rendering.

df_insivumeh_thresholds <- cumulus$blob_read(
container = "projects",
  name = "ds-aa-lac-dry-corridor/insivumeh_thresholds_aoi_chiquimula.parquet"
)

df_insivumeh_zonal <- cumulus$blob_read(
  container = "projects",
  name =  "ds-aa-lac-dry-corridor/insivumeh_zonal_stats_seasonal_aoi_chiquimula.parquet"
)

df_insivumeh_zonal_min_per_year <- df_insivumeh_zonal |> 
  left_join(
    df_insivumeh_thresholds
  ) |> 
  mutate(
    mm_flag = value<=value_empirical,
    season= fct_relevel(season, "primera","postrera")
  ) |> 
  group_by(adm0_es,adm1_es,season,year(issued_date)) |> 
  slice_min(
    order_by = value, n= 1
  ) 
  

df_insivumeh_zonal_min_per_year |> 
  ggplot(
    aes(x= year(issued_date),y=value, group = 1)
  )+
  geom_point(aes(color = mm_flag), alpha= 0.7, size= 4)+
  geom_line(color = "black")+
  facet_wrap(~season,scales="free", ncol=1)+
  scale_color_manual(values = c(hdx_hex("sapphire-hdx"),hdx_hex("tomato-hdx")))+
  labs(
    title = glue("Guatemala - INSIVUMEH - Forecasts"),
    subtitle = "Chiquimula",
    caption = "Plotting minimum rainfall at any leadtime monitoried in AA Framework
          Analysis performed at sub-national levelbased on area-weighted average of admins of interest per country"
  ) +
  geom_text_repel(
    data= filter(df_insivumeh_zonal_min_per_year,mm_flag),
    aes(label = year(issued_date)), color = hdx_hex("tomato-hdx"),size= txt_label_size
  )+
  theme(
    axis.title = element_blank(),
    legend.position = "none"
  )

```


## Threshold Tables

Let's remake threshold tables in case we want to update technical note in 2025:
```{r}

df_insivumeh_thresholds <- df_insivumeh_thresholds |> 
  mutate(
    iso3 = "GTM",
    forecast_source = "INSIVUMEH"
  )

df_ecmwf_thresholds <- df_rp4_by_lt |> 
  imap(\(dft,nmt){
    dft |> 
      mutate(
        season = nmt
      )
    
  }) |> 
  list_rbind() |> 
  mutate(
    forecast_source = "ECMWF SEAS5"
  )


df_seas5_insiv_thresholds <- df_ecmwf_thresholds |> 
  filter(
    !(iso3 == "GTM" & leadtime %in% c(1:4))
  ) |> 
  bind_rows(
    df_insivumeh_thresholds 
  ) |> 
  filter(
        leadtime<=3
      )


df_thresholds_labelled <- df_seas5_insiv_thresholds %>% 
  arrange(
    iso3, season
  ) |> 
  # print(n=15) |> 
  mutate(
    pub_month_int = ifelse(season == "primera",5- leadtime,9-leadtime),
    pub_month_chr = month(pub_month_int, label =T, abb=T),
    pub_month_lt = paste0(pub_month_chr," (", leadtime,")"),
    adm0_es = case_when(
      iso3== "GTM"~"Guatemala",
      iso3=="HND"~"Honduras",
      iso3=="SLV"~"El Salvador",
      iso3 == "NIC"~"Nicaragua"
    )
  ) %>% 
  select(
    adm0_es, 
    pub_month_lt,
    threshold = value_empirical,
    season,
    forecast_source
  ) |> 
  filter(
    !str_detect(pub_month_lt,"Sep")
  )
  

ldf_thresholds_wide <- split(df_thresholds_labelled,df_thresholds_labelled$season) %>% 
  map(\(dft){
    dft |> 
    arrange(adm0_es) %>% 
        select(-forecast_source,-season) |> 
        filter(
          !str_detect(pub_month_lt, "^Feb")
        ) %>% 
        pivot_wider(names_from = adm0_es,
                    values_from =threshold
        ) |> 
        select(
          pub_month_lt,
          `El Salvador`,
          Honduras,
          Nicaragua,
          Guatemala
        ) %>%
        arrange(
          desc(parse_number(pub_month_lt))
        )
    
  })
        

txt_footnote <- "Threshold calculations are made based on analysis of historical forecast data (1981-2022) to approximate a 1 in 4 year return period drought levels for rainfall over the entire season. Thresholds are calculated per country, leadtime, and forecast data source to minimize potential biases. Where possible national forecasts were used for this analysis and monitoring. Where no national forecasts were readily available, ECMWF seasonal forecasts/historical forecasts were used. <br><br><b> Note:</b> The national forecast provided by INSIVUMEH in Guatemala does not provide a forecast estimate for the month of publication, therefore when that month is included as an activation moment, ECMWF is used."


# set colors for table/legend
ecmwf_cols <- c("El Salvador","Honduras","Nicaragua")
ecmwf_color <- hdx_hex("mint-light")
insuv_color <- hdx_hex("sapphire-light")


# make legend for table MARS data
gt_legend <- data.frame(
  `Forecast Data Source` = "Forecast Data Source",
  ecmwf = "ECMWF SEAS5" ,
  insuv= "INSIVUMEH"
  
) %>% 
  gt(rowname_col = "Forecast Data Source") %>%  
  data_color(columns = "ecmwf", direction = "column",color=ecmwf_color) %>% 
  data_color(columns = "insuv", direction = "column",color=insuv_color) %>% 
  tab_options(
    column_labels.hidden = T
  ) %>% 
  as_raw_html()


ldf_thresholds_wide$primera %>% 
  gt() %>% 
  fmt_number(decimals = 0) %>% 
  cols_label(
    pub_month_lt = html("Publication Month<br>(leadtime)")
  ) %>% 
  data_color(columns = ecmwf_cols, direction = "column",color=ecmwf_color) %>% 
  tab_style(
    style = cell_fill(color = insuv_color),
    locations = cells_body(
      columns = c("Guatemala"), 
      rows = 1:2
    )) %>% 
  tab_style(
    style = cell_fill(color = ecmwf_color),
    locations = cells_body(
      columns = c("Guatemala"), 
      rows = 3
    )) %>% 
  tab_footnote(footnote = html(txt_footnote)) %>% 
  tab_header(title = "Primera (MJJA 2024) Rainfall (mm) Monitoring Thresholds",
             subtitle = gt_legend
  )


ldf_thresholds_wide$postrera %>% 
  gt() %>% 
  fmt_number(decimals = 0) %>% 
  cols_label(
    pub_month_lt = html("Publication Month<br>(leadtime)")
  ) %>% 
  data_color(columns = ecmwf_cols, direction = "column",color=ecmwf_color) %>% 
  tab_style(
    style = cell_fill(color = insuv_color),
    locations = cells_body(
      columns = c("Guatemala"), 
      rows = 1:3
    )) %>% 
  # tab_style(
  #   style = cell_fill(color = ecmwf_color),
  #   locations = cells_body(
  #     columns = c("Guatemala"), 
  #     rows = 3
  #   )) %>% 
  tab_footnote(footnote = html(txt_footnote)) %>% 
   tab_header(title = "Postrera (SON 2024) Rainfall (mm) Monitoring Thresholds",
             subtitle = gt_legend
  )



```



---
title: "Process MARS ECMWF SEAS5"
format: html
editor: visual
---

## Intro

- This code takes the grib files downloaded from the MARS API and processes them into easier to work with `.tif` files.
- data is store as 1 file per pub_date/month with all 7 lead times.
- outputs of this analysis are added to the _targets.R pipeline to extract zonal stats.
    
```{python}
import xarray as xr
import rioxarray as rxr
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata
from affine import Affine
from pathlib import Path
from rasterio.crs import CRS
import os
import datetime as datetime
import glob
import pandas as pd
import rasterio

DATA_DIR=Path(os.getenv("AA_DATA_DIR"))
MARS_DIR = DATA_DIR/"private"/"raw"/"lac"/"ecmwf_seasonal"/"mars"
OUT_DIR = DATA_DIR/"private"/"processed"/"lac"/"ecmwf_seasonal"/"seas51"/"mars"
```



```{python}

fp_glob = glob.glob(f"{MARS_DIR}/*.grib")

# this takes a minute
ds = xr.open_mfdataset(fp_glob, 
                     engine="cfgrib",
                     drop_variables= ["surface","values"],
                     backend_kwargs=dict(time_dims=('time','forecastMonth'))
                    )
    

                     
```

# Proccess GRIB
```{python}

ds['longitude'] = (ds['longitude'] + 180) % 360 - 180
ds["precip"]= ds["tprate"] * ds["time"].dt.days_in_month * 24 * 3600 * 1000
ds=ds.drop_vars("tprate")

# convert to DataArray
da=ds["precip"]

# take ensemble mean
da_mean=da.mean(dim=["number"])

pub_dates = da_mean.time.values
forecast_months = da_mean.forecastMonth.values

# give a CRS
da_mean = da_mean.rio.set_crs("EPSG:4326",inplace=True)
```

# set up grid for interpolation
```{python}


np.diff(da_mean.longitude.values)

rRes = 0.4 
points = list(zip(da_mean.longitude.values, da_mean.latitude.values))
xRange = np.arange(da.longitude.min(), da.longitude.max()+ rRes,rRes)
yRange = np.arange(da.latitude.min(), da.latitude.max()+ rRes, rRes)

gridX,gridY = np.meshgrid(xRange, yRange)

# define transform and CRS
transform = Affine.translation(gridX[0][0]-rRes/2, gridY[0][0]-rRes/2)*Affine.scale(rRes,rRes)
rasterCrs = CRS.from_epsg(4326)
for pub_date in pub_dates:
  da_filt=da_mean.sel(time=pub_date)
  time_temp= pd.to_datetime(str(pub_date)) 
  time_str_temp = time_temp.strftime('%Y-%m-%d')
  print(time_str_temp)
  out_raster = f"lac_seasonal-montly-individual-members_tprate-{time_str_temp}.tif"  # Use a single filename for each pub_date
  out_path = OUT_DIR/out_raster
  
  # create forecast month vector to loop through
  fms = da_filt.forecastMonth.values
  with rasterio.open(out_path,
  'w',
  driver='GTiff',
  height=gridX.shape[0],
  width=gridX.shape[1],
  count=len(fms),  # Set the number of bands based on fms
  dtype=gridX.dtype,
  crs={'init': 'epsg:4326'},
  transform=transform
  ) as dst:
    for i, fm_temp in enumerate(fms):
      print(fm_temp)
      da_filt_lt = da_filt.sel(forecastMonth=fm_temp)
      grid_ecmwf = griddata(points, da_filt_lt.values, (gridX, gridY), method='linear')
      dst.write(grid_ecmwf, i+1)  # Write to the correct band    
```



```{r}
library(terra)
library(tidyverse)
library(targets)
library(sf)
mars_dir=file.path(
  Sys.getenv("AA_DATA_DIR"),
  "private","processed","lac","ecmwf_seasonal","seas51",
  "mars")


tar_load(gdf_aoi_adm)
mar_files <- list.files(mars_dir, pattern = "\\.tif$", full.names = TRUE)

r <- rast(mar_files[100])
plot(r[[1]])
plot(gdf_aoi_adm$adm0$geometry,add=T)
```


## Appendix

Still playing with code below to see if I can make the coordinate dimensions register better.
I have set `eval=F` so that I can run the whole script above without initating any of the code below as it is essentiall scrap code


```{python, eval=F}
MWI_DIR = DATA_DIR/"private"/"raw"/"mwi"/"ecmwf"/"seasonal-monthly-individual-members"/"prate"
fp_glob = glob.glob(f"{MARS_DIR}/*.grib")
fptest=fp_glob[1]
# 
ds_single = xr.open_dataset(fptest,
                     engine="cfgrib",
                     drop_variables= ["surface","values"],
                     decode_coords=True,
                     backend_kwargs=dict(time_dims=('time','forecastMonth'))
                    )
                    
                    



                    

ds_single.rename({"values":"lat-lon"})

ds_single.rename({"values":"lat,lon"}).swap_dims({"lat,lon":"longitude"})
ds_single.rename({"values":"lat,lon"}).swap_dims({"lat,lon":"longitude"})

ds_single_coords_assigned =ds_single.assign_coords({"values": ds.longitude.values, "latitude": ds.latitude.values})
ds_single_coords_assigned.swap_dims({"values":"longitude"})
ds_single_coords_assigned.swap_dims({"values":"latitude"})



ds_single_coords_assigned.rename({"longitude":"values"})

ds_single_coords_assigned =ds_single.assign_coords({"values": ds.longitude.values, "latitude": ds.latitude.values})  


rename_dims({"values":"longitude"})
ds_single.expand_dims
?xr.rename_dims


ds_single2 = xr.open_dataset(fptest,
                     engine="cfgrib",
                     drop_variables= ["surface","values"]
                     # backend_kwargs=dict(time_dims=('time','forecastMonth'))
                    )                    
fp_glob = glob.glob(f"{MWI_DIR}/*.nc")
```
```

